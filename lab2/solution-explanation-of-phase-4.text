Dump of assembler code for function phase_4:
   0x0000000000400fc1 <+0>:     sub    $0x18,%rsp       ;rsp = rsp - 24
   0x0000000000400fc5 <+4>:     lea    0xc(%rsp),%rdx   ;rdx = *(rsp + 12)
   0x0000000000400fca <+9>:     mov    $0x401ec1,%esi   ;esi = "%d"
   0x0000000000400fcf <+14>:    mov    $0x0,%eax        ;eax = 0
   0x0000000000400fd4 <+19>:    callq  0x400ab0 <__isoc99_sscanf@plt>
   0x0000000000400fd9 <+24>:    cmp    $0x1,%eax        ;compare eax with 1
   0x0000000000400fdc <+27>:    jne    0x400fe5 <phase_4+36>    ;if (eax != 1) goto 0x400fe5 (explode_bomb)
   0x0000000000400fde <+29>:    cmpl   $0x0,0xc(%rsp)   ;compare *(rsp + 12) with 0
   0x0000000000400fe3 <+34>:    jg     0x400fea <phase_4+41>    ;if ( *(rsp + 12) > 0) goto 0x400fea
   0x0000000000400fe5 <+36>:    callq  0x40163d <explode_bomb>  ;0x400fe5
   0x0000000000400fea <+41>:    mov    0xc(%rsp),%edi   ;edi = *(rsp + 12)
   0x0000000000400fee <+45>:    callq  0x400f84 <func4>
   0x0000000000400ff3 <+50>:    cmp    $0x37,%eax       ;compare eax with 55
   0x0000000000400ff6 <+53>:    je     0x400ffd <phase_4+60>;if (eax == 55) goto 0x400ffd
   0x0000000000400ff8 <+55>:    callq  0x40163d <explode_bomb>
   0x0000000000400ffd <+60>:    add    $0x18,%rsp       ;rsp = rsp + 24 (0x400ffd)
   0x0000000000401001 <+64>:    retq   

Dump of assembler code for function func4:
   0x0000000000400f84 <+0>:     mov    %rbx,-0x10(%rsp) ;*(rsp - 16) = rbx
   0x0000000000400f89 <+5>:     mov    %rbp,-0x8(%rsp)  ;*(rsp -  8) = rbp
   0x0000000000400f8e <+10>:    sub    $0x18,%rsp       ;rsp = 24
   0x0000000000400f92 <+14>:    mov    %edi,%ebx        ;ebx = edi
   0x0000000000400f94 <+16>:    mov    $0x1,%eax        ;eax = 1
   0x0000000000400f99 <+21>:    cmp    $0x1,%edi        ;compare edi with 1
   0x0000000000400f9c <+24>:    jle    0x400fb2 <func4+46>      ;if (edi <= 1) goto 0x400fb2
   0x0000000000400f9e <+26>:    lea    -0x1(%rbx),%edi  ;edi = *(rbx - 1)
   0x0000000000400fa1 <+29>:    callq  0x400f84 <func4> ;call func4
   0x0000000000400fa6 <+34>:    mov    %eax,%ebp        ;ebp = eax
   0x0000000000400fa8 <+36>:    lea    -0x2(%rbx),%edi  ;edi = *(rbx - 2)
   0x0000000000400fab <+39>:    callq  0x400f84 <func4> ;call func4
   0x0000000000400fb0 <+44>:    add    %ebp,%eax        ;eax = eax + ebp
   0x0000000000400fb2 <+46>:    mov    0x8(%rsp),%rbx   ;rbx = *(rsp + 8)
   0x0000000000400fb7 <+51>:    mov    0x10(%rsp),%rbp  ;rbp = *(rsp + 16)
   0x0000000000400fbc <+56>:    add    $0x18,%rsp       ;rsp = rsp + 24
   0x0000000000400fc0 <+60>:    retq

int func4(int num)
{
   if (num <= 1) {
      /*
            0x0000000000400f94 <+16>:    mov    $0x1,%eax
            0x0000000000400f99 <+21>:    cmp    $0x1,%edi
            0x0000000000400f9c <+24>:    jle    0x400fb2 <func4+46>
       */
      return 1;
   }
   else {
      /*
         0x0000000000400f9e <+26>:    lea    -0x1(%rbx),%edi
         0x0000000000400fa1 <+29>:    callq  0x400f84 <func4>
         0x0000000000400fa6 <+34>:    mov    %eax,%ebp
         0x0000000000400fa8 <+36>:    lea    -0x2(%rbx),%edi
         0x0000000000400fab <+39>:    callq  0x400f84 <func4>
         0x0000000000400fb0 <+44>:    add    %ebp,%eax
      */
      return (func4(num - 1) + func4(num - 2));
   }
}

int phase_4()
{
   int number;
   int returnValue;
   
   scanf("%d", &number);

   returnValue = func4(number);
   if (returnValue != 55) {
      explode_bomb();
   }
   else {
      return;
   }

}